L 1 "src\Wire_Temp.c"
N
N#define INCLUDE (0)
N
N
N#if INCLUDE == (1)
X#if (0) == (1)
S
Sextern "C" {
S  #include <stdlib.h>
S  #include <string.h>
S  #include <inttypes.h>
S  #include "utility/twi.h"
S}
S
S#include "Wire.h"
S
S// Initialize Class Variables //////////////////////////////////////////////////
S
Suint8_t TwoWire::rxBuffer[BUFFER_LENGTH];
Suint8_t TwoWire::rxBufferIndex = 0;
Suint8_t TwoWire::rxBufferLength = 0;
S
Suint8_t TwoWire::txAddress = 0;
Suint8_t TwoWire::txBuffer[BUFFER_LENGTH];
Suint8_t TwoWire::txBufferIndex = 0;
Suint8_t TwoWire::txBufferLength = 0;
S
Suint8_t TwoWire::transmitting = 0;
Svoid (*TwoWire::user_onRequest)(void);
Svoid (*TwoWire::user_onReceive)(int);
S
S// Constructors ////////////////////////////////////////////////////////////////
S
STwoWire::TwoWire()
S{
S}
S
S// Public Methods //////////////////////////////////////////////////////////////
S
Svoid TwoWire::begin(void)
S{
S  rxBufferIndex = 0;
S  rxBufferLength = 0;
S
S  txBufferIndex = 0;
S  txBufferLength = 0;
S
S  twi_init();
S  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
S  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
S}
S
Svoid TwoWire::begin(uint8_t address)
S{
S  begin();
S  twi_setAddress(address);
S}
S
Svoid TwoWire::begin(int address)
S{
S  begin((uint8_t)address);
S}
S
Svoid TwoWire::end(void)
S{
S  twi_disable();
S}
S
Svoid TwoWire::setClock(uint32_t clock)
S{
S  twi_setFrequency(clock);
S}
S
Suint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
S{
S  if (isize > 0) {
S  // send internal address; this mode allows sending a repeated start to access
S  // some devices' internal registers. This function is executed by the hardware
S  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)
S
S  beginTransmission(address);
S
S  // the maximum size of internal address is 3 bytes
S  if (isize > 3){
S    isize = 3;
S  }
S
S  // write internal register address - most significant byte first
S  while (isize-- > 0)
S    write((uint8_t)(iaddress >> (isize*8)));
S  endTransmission(false);
S  }
S
S  // clamp to buffer length
S  if(quantity > BUFFER_LENGTH){
S    quantity = BUFFER_LENGTH;
S  }
S  // perform blocking read into buffer
S  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
S  // set rx buffer iterator vars
S  rxBufferIndex = 0;
S  rxBufferLength = read;
S
S  return read;
S}
S
Suint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
S	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
S}
S
Suint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
S{
S  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
S}
S
Suint8_t TwoWire::requestFrom(int address, int quantity)
S{
S  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
S}
S
Suint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
S{
S  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
S}
S
Svoid TwoWire::beginTransmission(uint8_t address)
S{
S  // indicate that we are transmitting
S  transmitting = 1;
S  // set address of targeted slave
S  txAddress = address;
S  // reset tx buffer iterator vars
S  txBufferIndex = 0;
S  txBufferLength = 0;
S}
S
Svoid TwoWire::beginTransmission(int address)
S{
S  beginTransmission((uint8_t)address);
S}
S
S//
S//	Originally, 'endTransmission' was an f(void) function.
S//	It has been modified to take one parameter indicating
S//	whether or not a STOP should be performed on the bus.
S//	Calling endTransmission(false) allows a sketch to 
S//	perform a repeated start. 
S//
S//	WARNING: Nothing in the library keeps track of whether
S//	the bus tenure has been properly ended with a STOP. It
S//	is very possible to leave the bus in a hung state if
S//	no call to endTransmission(true) is made. Some I2C
S//	devices will behave oddly if they do not see a STOP.
S//
Suint8_t TwoWire::endTransmission(uint8_t sendStop)
S{
S  // transmit buffer (blocking)
S  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
S  // reset tx buffer iterator vars
S  txBufferIndex = 0;
S  txBufferLength = 0;
S  // indicate that we are done transmitting
S  transmitting = 0;
S  return ret;
S}
S
S//	This provides backwards compatibility with the original
S//	definition, and expected behaviour, of endTransmission
S//
Suint8_t TwoWire::endTransmission(void)
S{
S  return endTransmission(true);
S}
S
S// must be called in:
S// slave tx event callback
S// or after beginTransmission(address)
Ssize_t TwoWire::write(uint8_t data)
S{
S  if(transmitting){
S  // in master transmitter mode
S    // don't bother if buffer is full
S    if(txBufferLength >= BUFFER_LENGTH){
S      setWriteError();
S      return 0;
S    }
S    // put byte in tx buffer
S    txBuffer[txBufferIndex] = data;
S    ++txBufferIndex;
S    // update amount in buffer   
S    txBufferLength = txBufferIndex;
S  }else{
S  // in slave send mode
S    // reply to master
S    twi_transmit(&data, 1);
S  }
S  return 1;
S}
S
S// must be called in:
S// slave tx event callback
S// or after beginTransmission(address)
Ssize_t TwoWire::write(const uint8_t *data, size_t quantity)
S{
S  if(transmitting){
S  // in master transmitter mode
S    for(size_t i = 0; i < quantity; ++i){
S      write(data[i]);
S    }
S  }else{
S  // in slave send mode
S    // reply to master
S    twi_transmit(data, quantity);
S  }
S  return quantity;
S}
S
S// must be called in:
S// slave rx event callback
S// or after requestFrom(address, numBytes)
Sint TwoWire::available(void)
S{
S  return rxBufferLength - rxBufferIndex;
S}
S
S// must be called in:
S// slave rx event callback
S// or after requestFrom(address, numBytes)
Sint TwoWire::read(void)
S{
S  int value = -1;
S  
S  // get each successive byte on each call
S  if(rxBufferIndex < rxBufferLength){
S    value = rxBuffer[rxBufferIndex];
S    ++rxBufferIndex;
S  }
S
S  return value;
S}
S
S// must be called in:
S// slave rx event callback
S// or after requestFrom(address, numBytes)
Sint TwoWire::peek(void)
S{
S  int value = -1;
S  
S  if(rxBufferIndex < rxBufferLength){
S    value = rxBuffer[rxBufferIndex];
S  }
S
S  return value;
S}
S
Svoid TwoWire::flush(void)
S{
S  // XXX: to be implemented.
S}
S
S// behind the scenes function that is called when data is received
Svoid TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
S{
S  // don't bother if user hasn't registered a callback
S  if(!user_onReceive){
S    return;
S  }
S  // don't bother if rx buffer is in use by a master requestFrom() op
S  // i know this drops data, but it allows for slight stupidity
S  // meaning, they may not have read all the master requestFrom() data yet
S  if(rxBufferIndex < rxBufferLength){
S    return;
S  }
S  // copy twi rx buffer into local read buffer
S  // this enables new reads to happen in parallel
S  for(uint8_t i = 0; i < numBytes; ++i){
S    rxBuffer[i] = inBytes[i];    
S  }
S  // set rx iterator vars
S  rxBufferIndex = 0;
S  rxBufferLength = numBytes;
S  // alert user program
S  user_onReceive(numBytes);
S}
S
S// behind the scenes function that is called when data is requested
Svoid TwoWire::onRequestService(void)
S{
S  // don't bother if user hasn't registered a callback
S  if(!user_onRequest){
S    return;
S  }
S  // reset tx buffer iterator vars
S  // !!! this will kill any pending pre-master sendTo() activity
S  txBufferIndex = 0;
S  txBufferLength = 0;
S  // alert user program
S  user_onRequest();
S}
S
S// sets function called on slave write
Svoid TwoWire::onReceive( void (*function)(int) )
S{
S  user_onReceive = function;
S}
S
S// sets function called on slave read
Svoid TwoWire::onRequest( void (*function)(void) )
S{
S  user_onRequest = function;
S}
S
S// Preinstantiate Objects //////////////////////////////////////////////////////
S
STwoWire Wire = TwoWire();
S
N#endif
N
